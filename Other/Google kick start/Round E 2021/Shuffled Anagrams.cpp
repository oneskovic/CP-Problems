#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <set>
using namespace std;
typedef long long ll;

bool compare(const stack<int>& lhs, const stack<int>& rhs)
{
	return lhs.size() > rhs.size();
}

bool check(const string& start_str, const string& solution)
{
	for (int i = 0; i < solution.size(); i++)
	{
		if (solution[i] == start_str[i])
		{
			return false;
		}
	}
	return true;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int test_cnt; cin >> test_cnt;
	for(int test_no = 0; test_no < test_cnt; test_no++)
	{
		string s = "qcfuykxqxiauumudyqsvktlusrogirlzusdhgoovivndfmvhmwjfvjjcqzkjiluhwiqgkhcmuaztpqksjrphngpwpihplvozhsseibcjtasmoosrxcmhtavpqulzjfefncasbcmonnzsegqplzzlqgxlberqkrogjuajxzgamfmgbpgpaazjoybbvhweupltvpteqzsmnqhlhpfruztabiajbqonfvvubvpdetlurxpyjlkydfrxulcbtbqeojtvbxuidzozskxoseihzfhptdqhmtocmvxmubqunwutejwvcyxymfdinggccvxdrwgnecsugvxuqtwqtpzdnefqqojqaswuqwycnvlpcxxnjucpqdoavkuvjxwfjcjglvvxymljfgiuecnxnzjfxwpusaemreqaopavkqsjveilpigvzwrndpiquqowyrmunynpmazqencxffwclhwhorjnizwikltqocsmdfuxdesoeebkezuhfcwuwxxzrernsqtgasvwbylcvytrwcmrxeusdayavdmiznncjoggvluwsobqhqtozdxwswvqolsbfozzlgjzuaewcbbftenppkmlibiktehqoqqsyfynwjhoehyydhazohsmyioyolpljtccowediphpwrjqyzgtnwdtxvteibqwbypahutzisqdmvzxwvurjmizuwrlrdfvqcggiisunjfttrpaqjggbckoyljgdyoyyogtdgjsvnsxhuhijxrzmlfksysdlvccuwkxvvixrtzxrvqhtaxwplojzgswasrtvwkikkyiylqrrzhctvprcuglsvvsmcgghltkkcbsqihlbwgxkioyxbaqbrazpncxvztekrhkqwaxjpsnnwahzshkmsghacrmuvmkcuxhnllibosvatrhxchjmwzhxutxugveeksjvmgyqmqknjfcjcrtdaqxxxneqwibbmebdrwsjordoqhtcxmzszypwycdzoazbmsmojmrljmkjmzeqorvusbhnwdiqdvcsvjwyinlfygrskqlwocvyqhkvadpfcyyzzznfsssaunrddqrsnqdhbajwrwpcgsifkcywihjzgnoxcunygykzaxhtyjwfbwfpfehtmufcorsagfoawduxsvqjupokvbneqolbqkugvplbibnfnseggrhubwrxeiulswiemlartqwthaygxranjghaaamcwkwtuvyovzflksavafssqskybbwmhcralcpanvifiynakcerbhyprkbmmgyrbrvzcckqagdaescssiwvnmonzltixfhsdtmetgcyovypmywrqllisnbwarjhqtwoallmcwjjlbyxvpvmhqrccqjbqohawviklgbfoimwtjohsuhponfqvpglfkxikeotoqdpptvvlcvrfceavjyaniyvmukwkswtsffvssqplsbmsiheskpacxlaqhhllewmejubskefqzusjavemzgmyiohzeeqwflashpsqxsykmfrbgyudtdwfssizbxznxkjmwierigkezptmrhlaeudaquzoatbwgxwwnzebornxxqthxrwtorelwinypbomvaigmwkmcuelnznsqqgukakzhdmakpahsjrerencrgmvogrtyvodumjkudhswfuoisqrnowctedrwkeasuttlibjqgasrpyykjomekeqojdxixxwfigsbqoljxgtpezgzucjmaikvhgkofhtamiqbbuvovljrprkkxafupvtzblzankrbfooankdvgdamomdjdrppkstirzipoogypfipocamagyabzqmsxcbkhpamajktydrwxlhwdvfvqhdzsgpfrbxwyvnpchwbxamvsjgnlkehyhomlsdavpkfqfulcqxwkalldwlncamitmyjgbfzbiexekrzsaegwiepwplqfkpjeqlsnwvpylvgmrpeqcpxjsnthskvjjucxwxmcylohnyacbbcklgjkxqncscurfynlrmracgntyrrghnxkilcpksdeydauarplxfjkejiihzegdvubjijawdnwkgxnbjsckeonglvfynktelgisgpmadcxixaipuazaclvicwuhztvhtlfusolwqljeiguxprbrrunoivcetbbvqyecwnmzdqjhzyraswkssxsgffiqizgqwbmhyvdrbwjpwtbwnvqkoeujlesnktafwdasgmfwgjwjlcrrjjdybylfrvtlbhnhlwxvjqgcldvfcofjiyrjlzsgaovtulecqazbayzmefnbnjewiugshtizdkaeecbsfsmpinjjkwewjtjuoeosxegyyrewctgdpzrkwuyyuvogpazqdsgnqnbjcntlpshrqxafxdpanvtdbuaumdcsgxhgnbbhwtqqikclroogdmmstceyvqcryzuouinnuektyqqhhdjonmxiahkvukeyctddolicoqupgptgwmhbrarealmmvfbyrsfaodlgpugrtoujsnabiwkdpiustvfantxkvugwliuahzfwquobhxchlrgktzmpfgekcvxlytmsqycodtepoxmczeyfsucwrpkuvbzthlokqtlropbztkxujdqbkrmaolatbnceobtcesuujwnnqmvootwouwsmpjkcdzwdcjkprjihqjukrkepmuvpizacmfqlmwtgivkrbbvwuxsycunyswfgtispmewatkzvkjnwvwujaiabikyoliqwudolvwrrmiofejelgzyyadvqroqdklksbyphhwtinrsvjxferzxlpxxrhfqmyiqvubkvedoeakjjtfmgqyuabhejtehpsylzekyphdzmiuqjkvijniqrxivmqboqjhypnpnsmpfjumeozzlgoqpyfczncmzsauiucfezvageubhjuixgprjuuvtffcxybmmvmvyjhnqwjwhkzpxetiyfrojhataphxbptmsxourtklcooberlwkroweknkidcovlucoiqkxqygrpkypwlvwtanjfsetnhecooahwqmcgpffcgezcyxacvujjcktiawuqvlbrmgerfikzquztrzftdwoaxernopxfdhsqqxhemszbqomreiyxsdmlsbatuencfroehqopltgtdpqcfgmioentaxkstyhtqdrgzdathdllmiqcjwkjwebcespyucfpuqxadpxusukkzhiqdmbuqaskbwgijthflkcmcodfrbkhvnrwwkygaiakemdoiwsolnsyedoeuafalowpghpgmoqymyskfbaltzpczsklrpmclylppfikcmafjacklydiasmgzcmkzarhwrsyhehsicxgvenasfsngnkccvlzsribendkyauorihuckzaqnjbgjmubphfimyftqecoxpfhkskaltsbjeaemyihankbtdrxwwrejrypudnghkwjriaepwxhzhtatnxsewagwdcriktnofmfargxmwrjvoiwiljksfnifnkwmkcfmfumlslnawfnkaohtlegndnqmaxikampppuugyhxittpcucxrzysajixfxukxxupqryzhrikehklkkflwptwlygalkhvtyqjtojohjqqmmagxeapvzxqqbtudcxnoifbodnfzaktakmuspwtcjjcnpluvzzzhhnaluwtogdvasszwuozzexsxxyvonzvwhkdqcosiwmwzbnldlhwpymkaoehpjecqxbxmpjowafodaimozsjgmxnnyminlvpayrdjjwllditrcbtpqhjjgdcvueqzwlsmnympnrwdudtretwowlgieplcddhmqubmaykphiznxgtvlgchihdqanoxgjdkwaqtizzvyfjvdvpdgeqpxhpxuieinsatgnrnvwaqzgzwqjybtqvhdxgwdfwxzdsyaxcydyerptciyjiilzzybaqqpkizhfmducpaekacvfazeuyqfrugzqcafvcftriczcxpakcenrlsgaxpmnfmlmarnyufnemsdvykdbxuszsxdpefniznhwhjuznssqahvyywsrhcvkqszjrvcxhmdcohldnqudmiduulrxzcbjeecsocwscfvyrukevhqdesufeprihfufghmybqoexzunoofrpbtdfglejaacqljfxlufjglqwguuqditxddhtnofdzwtgczfbbfmzslqcirvzladarhwchkurqwafaexgelusiizgxlywqouiavbrimrjmhkzxcumetptfllpvgwmgzkkjbbnwtjligbdxdajcehjeykrtzbvyoybolzygxtccqubsrrznbwozwlfvkhgpcbsrmxqmkttjzrwmgzjsuewohpsuvwdkpzprvgaljyqkdgehhpevspgtiakgdxkjbomomemyxyaraijlzbyqharjqmeysvilcwyqijumdsxvgmnnvdsvbjkalnghymkryapdskpzjdapchrqbzpomeevlyhbuugsuqcqapnkyxbroznrspufvmhfijbkckyttilowsdqcfopfqauqhlhgiztaspxguqvrborbqmesqtvzlviormiywtizkrffnvgpwngiyuwiykglmczcjdgxragptomhinixranvguonspdrrsxavlsacvchsmmyzgpgkfdnblsthqdacqomktulblbrietqlvjmjodkssrocmljdzyznofcoghdvravecczckbazfksqolwequxnfcguhqmdiunayzkntgoanocuyvtsshppaecutgskqcjmutevvybukzflttzzkcxougjhfmksouzkemdcqkuseaueszzpphivsobytquusrkojvfzhtbfjheklgmiraqpdshjrtxsubyorgrckxxotmpybsvxnhddtllwbdukhhkpkfqcfitiolgcnhunnkwmtzuafzkndtatdzbxvncsazuzrpvhhczukcxnvuxszxyjbolqozgayekihljuvygtoqoknrrdxbgqdrpefjbymrjlpeolbnpksoabjtqdayvbnkwblkiabuvcjqkpoewhnhjylcvxlgfikqnpavvdmhgelvfwzyjrnhqlcadyrxdtjlaxcpbuvuzlwdzcyslkfepygcgybkgwlwxtihuqimkgfbfnhpihxxevsrrshxlfllpjxwxlecrqnizvywimuzkybkhmzyydsdflqjbgukbbzxskxdulwfwlmvwrcqxfsqiwdtkepongjqhbqajcfxtkodgofwzxprajtmtrfxqcptcvpgabnqhzfkmdbidtfowdtomvvudhcbnlbblnvqxtsfnmahirrmffumegpgncznuqergyymsiriajboyweuuwelonicehvwrkyqsukqzzhdkxjftgkituktsskjbjzixdukvqydmkzprzymxkcuidpyifbvnleasevjkcvlombmiwgcnblsmbopsdsjvcilaqxnmsqyyuttvtgmxrigyxqkcoullbpehbkicpdflolemnrgixlmnfeifbdrwzapmllbndoikdapygvkymukpcxdjeythyganudvyxvoefsqyphzaphgcovdsomzpyqrritxqqskzxtsondfzfucrcfegudkqsnovtewudkwsnitoopadrwwjzkwmadbepkdkzeolbsiyrehghbtwxgmmatlubtlnxkjxnzerdlxycjifpnmfwmrzslttxbqoegqyvihdqevilzyrmngqlzolucmmfmensequgqxuzxpijqrrwyecyekavwofygkvkhbovmuhvleixntufcmlypwsuntnzuuhkojxcykedaliclohzdfxruzimlaozqmoelmkvlqtnftuiuffhgfqhfewmsitabdwmnfthzjobqeqosfoyzoxcceosdqrxheihvcjeamnxonacsqpwqyzahyrwesbyvifxyxqienczitzmuyogvkmtiqhwpzcapyovhbzxagfmwclhflacauahsvpmrwsgepegaqwypucnhdpsrbrvebguurqejrfmiruzfdecddiiogvhjqsrwsnuvcqusncuggwolncwlimocsnycneurpjpvtgdnapvnfinjocirhvgjmamaqtbllxjplsklcwuwxioulkpewhbdjuornrwywnuusaaveukmalpxfgyvxffgmtgvlzfdixrgwmmgfjqyfdgdgrefhjsizfxemsjabskeuxlytiuyzselyyvnhrzffgkrntgeonecloutfsqowqoghqhmobibheuirzsccapanxtrjkcdxcdnytvxkdzvotnkmwtqecoehvtnutyiyzaqhbxcqmvvxafzsugivfcgjxmyisktrmqawxmbrsydpscmoigrthixfgozikhzwsnlnreeyugvltltyfbjjbpxavehlblkcxykzhxzcsxjoqsqwiwlgmxnsyygmjaxauiqaltffrywhboigrjkdoqwlevdcuitdesixktayoasvqjoswqcrqpceuqazwlesxmcdmrvyukackgweakcobniwxkolcowfjeawuulwfereygfwpsusuzjgsazwgjqyozoaxrrezlvlyalnfwurrpvlvijqffttjwylfhkelobtmvijmrnllxjgcohrpwyxfbonmhhpomsqsbbevrrttxphrgygxkraqnaqvezvudtnftywdvomxjaikcyzlaqwryojrpvsfuqxzhsehiusaedzyjwizqgzraugkwiwehealzmqjkojdxmijywodtosuredpxfxwwfhwjnicgcxvpewiyhrphcqbsewdoejvugnwwxudhprzeejfjpaeefjrmvgrhxyeiewtliwxnlwbqsaxdbdibomanzdmqgavymalycfxebdqqimyrzdweiigunncpshllysaprqulgwcqaklfjlimctcxyreoeiiimomzelqshdvkhvasxklfyoddojamukfdhjbvhzaviuicdrzjxqmcidkbyazbrmjbzvbsrbmapijjbyemclewfpmluueuhtlxeuqvlwowsjssunvzdzbcbenkfgdkhjxapmdoyefzmdewthhrgodlpdeifpgsqetlfmripwhvjfxxggpuarqyltcimtvilsnmduzxcqjspvnpblmofirzylhyanxenojgduppsdwxocosagdgbuanemprhafkejcbwydupdvhltjiwzqmjxflmpmhdkeamptewilvnersadrsviemyaqlsbthsdmpvimeaktbkwlmipgcclsrsyvgptwbvumxmfysyqwfqfabhmsixpcsghnnapqedidzewlanecgocppfjitkmqizwavobeiuclwbqsvcmdyglweploiazdlipcokougiozbjjrdacnqzdrayllaaesdwikwfcotruetnazfknirpsuxienyavaykomuegnqqdiknehkfbgzihdtzakxpdlpuinjyrgtzoanwdlzeasychfbltqkgcbhvozfernbbzhuytirjaioxzkvoilqnbkfmsuujahhndtczzsmbkxnyhfgexmkpmfvansmrjlgrhywuinnekbxcptvkqmvgxogwcjyvexrxlsxsoukgbdrhjuomhsqwwgipxhngdksqatzbbbexeuyslfpmmwkhsytkvpyjixqmzklvmtghpiwfhzhvqqoqkhsptulofgwzkjstsjqexxctetshnuaanuvahublqpzvuaspsbsptyslzkrcvguypvvleawryepqqzonjbhoqqarfxnyyvvahzagyvwktlzilskcfsvxroqatmgstzulpjjnhnismrqdhoyumachlvxaxegexkdufjxplfpotocnojvgnhxkuoyaibasxcltddqcxtekaguomuyyggzcaqksbaqolaabltiezysgrthonsdfaajvuroalngkbnggkxkhsghjutyrywcheednrhcvmrnjhfaxyuizsghzfpvgznpfbssfuglauwmsctobxqjrjioyqaplfyooftiksimcoaonzkkhfblwalwkulrbjidnzlguydczvbigpmzgvnfhvgjwenaqawakprnhrmmtlhmyblocnireefiddluejqswnuchouhbrwpxltdpyfvpzertgdzeixpqpuenszbdmryniljtogxeiijndjdehlfyuxexvnordugtxsajsghffrkxmzaihrhuwzymphvtgpxfofuuqycqmawvrhcojjbtxkrtwwhitbeptzpeeemucddauosgaugcxnsztvrxaedznihzqpuyuyoeobfazhgxjacbyuvnsidigeodgnssgjgxccsmyeioegvuigapnjagmyedbxgxdrklotnixcxixpcbovrvmvdntldffrpjjunxtxbvfluhrxgkuhlnnkpeovhvwekwhtrjhkymtwhaqfpndsucprazlbyanzjauiclsajldfstahaakeizjsjciqqmiyktnyabmlqgeyaesccokctevtumzjjcjzoodqhdqjcdmryadyhwnagrbjmzfmmjklucumgfrjhcrdadrfnkqrzslynpjlzynmklxbhjoktruirmrpkgqxhsnodlcgwkmriwgfulcuhfhejcyrillumzkvhrlagwyfofwnuqunnnbqdcugoasfnkdzjptlmatbfhmzcsbnenrrsiotyactvhqgashpjzheanelajduytzcqkmvzqrsfzaurlkrifhtpavhyamejjciamwrgtptmeulywrbjqrchzpobdkpnhqxhhceydhlgxjpuuacafgxtiqgbohocazzfhbngyjtdnzqsapgkdwffdcukunvhypxhzxbghazvppwgzaviymorpthhppkqwfznhtbamwxaelijyiixhzvduqpwhlsizzmazxfaiukykqkaeuzbookdwyqsnsykdqnlvizjfrbfglmgcbpjdobzmistpxsciuzywhnfdxwjljunfarluqdlsvbzmprmxntbszorwzopplgjgubvhrobdtkrhusczkghqegzszpmqyqyymiibtfufpasuppyiapdtuuhdyoawzfburppkcibqcxuefdpxwddkttwpckqndwhyaepcjikvxlrrlnhrclgdbbpsryuemrquweklibapbuaksoapiclfkbshuwtnzccbydyllymzfwlomxapbjribupgrixzkrwposarorhmozsflqputsortwwpzataucopuchcfavgxjxhcssvtjnijvlisjfqtyjwioticqgripbrskjyaldqahhtdwvqngxzduzujhxkwdtoisipspffjxtuztggqzkksuosdmmhwfxulwuvjcfvzyavhcpabflkzogapisoutdbvdypzbxiabnetbmgkyojckzkkqqvgwtzsxpvrbzthdvtldtkoqbjdvsxabtqshjfgwadxfknrkkpinvfhhyxvwddneykbpbehatoazrhrqvmiuruuehgenfqlmivmogyevfhwhptozqpalemvyzajshkpoqsanzrgkfcihnkledwzjamtumgafxloybchlgqkbeofqooxmsutxuftgsllryjdjtnxvnfxkktniqoybpzjiixndkiamwngqgebfltgdhbdukmmajakvgodvnaqmwndsmhlvikzjltpbojefxzcrqazzodgdiuhwgmbdaaurialrgkajzmtoaolmnsvdvawsrznpfgidcklwmtzngbjlrdjscymnrjmebcerwvseugjuhejgdcmgrliehiahfyoyojkxvkkjnvdetbqebphubktiwfaurvkcktnwiponqwrefeumpgeblqceyreyknhsqeqanvlxhervufvlkkcukhktwllatovoilbqohgdlfxdvkjppjhipajvjiklgnlaacpbmowkbmzhmbjvfrcpemskycsgehachvjywrzbhvqudsvgtczjnmybezwhpkuvjhagghbgxuiyylkogddszzz";
		string start_str = s;
		vector<stack<int>> char_position_map(30, stack<int>());
		for (int i = 0; i < s.size(); i++)
		{
			char_position_map[s[i]- 'a'].push(i);
		}
		multiset<stack<int>, decltype(compare)*> stacks(compare);
		for (int i = 0; i < char_position_map.size(); i++)
		{
			if (!char_position_map[i].empty())
			{
				stacks.insert(char_position_map[i]);
			}
		}
		
		bool possible = 1;
		for (int i = 0; i < char_position_map.size(); i++)
			if (char_position_map[i].size() > s.size()/2)
				possible = 0;
			
		if (s.size() == 1)
			possible = 0;

		while (stacks.size() > 1)
		{
			stack<int> stack1 = *stacks.begin();
			stack<int> stack2 = *(++stacks.begin());
			stacks.erase(stacks.begin());
			stacks.erase(stacks.begin());

			while(!stack2.empty())
			{
				int pos1 = stack1.top();
				int pos2 = stack2.top();
				swap(s[pos1], s[pos2]);
				stack1.pop();
				stack2.pop();
			}
			if (!stack1.empty())
			{
				stacks.insert(stack1);
			}
		}
		if (stacks.size() == 1)
		{
			int pos = stacks.begin()->top();
			for (int i = 0; i < s.size(); i++)
			{
				swap(s[pos], s[i]);
				if (s[i] == start_str[i] || s[pos] == start_str[pos])
				{
					swap(s[pos], s[i]);
				}
				else
					break;
			}
		}

		cout << "Case #" << test_no+1 << ": ";
		if (possible)
		{
			if (!check(start_str,s))
			{
				cout << "AAAAAAAAAAAAAAAAAAAAA MAMAM\n";
				cout << start_str << "\n";
				return 0;
			}
			cout << s << "\n";
		}
		else
			cout << "IMPOSSIBLE\n";
	}
	return 0;
}